// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  password String?
  emailVerified DateTime?
  image String @default("https://cdn-icons-png.flaticon.com/512/1531/1531344.png")
  role UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  servers Server[]
  members Member[]
  channels Channel[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String
  inviteCode String @unique

  creatorId String @db.ObjectId
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channels Channel[]
  members Member[]

  @@index([creatorId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  VIDEO
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  creatorId String @db.ObjectId
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([creatorId])
  @@index([serverId])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  fileUrl String?

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String @db.ObjectId
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Account {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  type                String
  provider            String
  providerAccountId   String   @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  userId              String   @map("user_id") @db.ObjectId  //! Foreign key
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)  //? Relation

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  token       String   @unique
  expires     DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  token       String   @unique
  expires     DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  token       String   @unique
  expires     DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  //! Foreign keys
  userId     String   @db.ObjectId
  //? Relations
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@unique([userId])
}